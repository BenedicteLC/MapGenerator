/*********************************************************************
 *
 * Software License Agreement (BSD License)
 *
 *  2013, Benedicte LC 		LLC.
 *  
 *
 *
 *********************************************************************/

#include <ros/ros.h>
#include <move_base_msgs/MoveBaseAction.h>
#include <actionlib/client/simple_action_client.h>
#include <nav_msgs/GetMap.h>
#include <costmap_2d/costmap_2d_ros.h>
#include <costmap_2d/costmap_2d.h>
#include <navfn/navfn_ros.h>
//#include <obstacles.h> TODO
#include "obstacles.cpp" //TODO

using namespace navfn;
typedef actionlib::SimpleActionClient<move_base_msgs::MoveBaseAction> MoveBaseClient;

int main(int argc, char** argv){

  ros::init(argc, argv, "compare");

  Obstacle obstacle(argc-1, argv, argv[argc-1]);







































 //tell the action client that we want to spin a thread by default
  //MoveBaseClient client("move_base", true);

  //My own crap
 /* ros::Publisher map_publisher_; 
  ros::NodeHandle handle("~");

  map_publisher_ = handle.advertise<nav_msgs::OccupancyGrid>("map", 1, true); 

  std::string robot_base_frame_;
  handle.param("navfn/robot_base_frame", robot_base_frame_, std::string("base_link"));*/



  //wait for the action server to come up
 /* while(!client.waitForServer(ros::Duration(5.0)) && ros::ok()){
    ROS_INFO("Waiting for the move_base action server to come up");
  }

  move_base_msgs::MoveBaseGoal goal;

  //we'll send a goal to the robot to move 1 meter forward
  goal.target_pose.header.frame_id = "base_link";
  ros::Rate loop_rate(10);*/

  /*while (ros::ok()) {

    goal.target_pose.header.stamp = ros::Time::now();
    goal.target_pose.pose.position.x = 1.0;
    goal.target_pose.pose.orientation.w = 1.0;

    ROS_INFO("Sending goal");
    client.sendGoal(goal);

    client.waitForResult();

    if(client.getState() == actionlib::SimpleClientGoalState::SUCCEEDED)
      ROS_INFO("Hooray, the base moved 1 meter forward");
    else
      ROS_INFO("The base failed to move forward 1 meter for some reason");
      
    ros::spinOnce();
    loop_rate.sleep();  

  }*/

  return 0;
}

